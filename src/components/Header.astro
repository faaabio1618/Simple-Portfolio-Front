---
import type Site from "../interfaces/Site";

const {site, title, subtitle}: { site: Site, title?: string, subtitle?: string } = Astro.props as {
    site: Site,
    title?: string,
    subtitle?: string
};
const currentPath = new URL(Astro.request.url).pathname;
const links = site.Menu.Entry
---

<header class="navbar bg-base-100 shadow-sm sticky top-0 w-full z-50 py-6 lg:px-5 max-h-16">
    <div class="navbar-start">
        <div class="dropdown">
            <div tabindex="0" role="button" class="btn btn-ghost lg:hidden pl-0">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24"
                     stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h8m-8 6h16"/>
                </svg>
            </div>
            <ul tabindex="0"
                class="menu menu-sm dropdown-content bg-base-100 rounded-box z-1 mt-3 w-52 p-2 shadow">
                {links.map(link => {
                    const absoluteLink = ("/" + link.Page).replace(/\/+/g, '/');
                    if (absoluteLink.replace(/\/$/, '') === currentPath.replace(/\/$/, '')) {
                        return (
                                <li class="text-lg link-hover" id={`link__${link.id}`}><a href="#">{link.Label}</a></li>
                        )
                    } else {
                        return (
                                <li class="text-lg link-hover" id={`link_${link.id}`}><a
                                        href={absoluteLink}>{link.Label}</a></li>
                        );
                    }
                })}
            </ul>
        </div>
        <a class="text-2xl font-mono whitespace-nowrap" id="site-name" href="/">{site.Name}</a>
    </div>

    {
        title &&
            <div class="navbar-center hidden lg:flex flex-col" id="title-container">
                <h1 class="text-2xl font-bold uppercase">{title}</h1>
                {subtitle && <p class="text-sm">{subtitle}</p>}
            </div>
    }

    <div class="navbar-end hidden lg:flex font-mono">
        <ul class="menu menu-horizontal px-1">
            {links.map((link, index) => {
                if (index !== site.Menu.Entry.length - 1) {
                    let res;
                    const absoluteLink = ("/" + link.Page).replace(/\/+/g, '/');
                    if (absoluteLink.replace(/\/$/, '') === currentPath.replace(/\/$/, '')) {
                        res =
                                <li class="text-lg link-hover" id={`__l_${link.id}`}>
                                    <a href="#">{link.Label}</a>
                                </li>;
                    } else {
                        res =
                                <li class="text-lg link-hover" id={`_l_${link.id}`}>
                                    <a href={absoluteLink}>{link.Label}</a>
                                </li>;
                    }
                    return (
                            <>{res}
                                <div class="divider divider-horizontal"></div>
                            </>
                    );
                }
            })}
        </ul>
        {links.length > 0 && (
                <div class="">
                    {(() => {
                        const lastLink = links[links.length - 1];
                        const absoluteLink = ("/" + lastLink.Page).replace(/\/+/g, '/');
                        if (absoluteLink.replace(/\/$/, '') === currentPath.replace(/\/$/, '')) {
                            return (
                                    <div class="text-lg link-hover" id={`__l_${lastLink.id}`}>
                                        <a href="#">{lastLink.Label}</a>
                                    </div>
                            );
                        } else {
                            return (
                                    <div class="text-lg link-hover" id={`_l_${lastLink.id}`}>
                                        <a href={absoluteLink}>{lastLink.Label}</a>
                                    </div>
                            );
                        }
                    })()}
                </div>
        )}
    </div>
</header>

<script>
    import {gsap} from 'gsap';

    // Wait for the DOM to be fully loaded
    document.addEventListener('DOMContentLoaded', () => {
        // Set initial states
        gsap.set("#site-name", {opacity: 0});
        gsap.set("#title-container", {opacity: 0});
        gsap.set("li[id^='_l_'], li[id^='__l_'], li[id^='link_'], li[id^='link__'], div[id^='_l_'], div[id^='__l_']", {
            opacity: 0,
            y: 20
        });

        // Simple fade in for site name
        gsap.to("#site-name", {
            opacity: 1,
            duration: 0.5,
            ease: "power2.out"
        });

        // Simple fade in for title
        gsap.to("#title-container", {
            opacity: 1,
            duration: 0.5,
            ease: "power2.out"
        });

        const menuItems = document.querySelectorAll("li[id^='_l_'], li[id^='__l_'], li[id^='link_'], li[id^='link__'], div[id^='_l_'], div[id^='__l_']");
        gsap.to(menuItems, {
            opacity: 1,
            y: 0,
            duration: 0.5,
            stagger: 0.1,
            ease: "power2.out"
        });

        // Hover animation for menu items
        menuItems.forEach(item => {
            item.addEventListener("mouseenter", () => {
                gsap.to(item, {
                    scale: 1.05,
                    duration: 0.2,
                    ease: "power2.out"
                });
            });

            item.addEventListener("mouseleave", () => {
                gsap.to(item, {
                    scale: 1,
                    duration: 0.2,
                    ease: "power2.out"
                });
            });
        });
    });
</script>